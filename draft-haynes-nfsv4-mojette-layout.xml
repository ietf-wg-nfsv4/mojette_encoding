<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>

<rfc
 category="std"
 docName="draft-haynes-nfsv4-mojette-layout-VERSIONVAR"
 ipr="trust200902"
 obsoletes=""
 scripts="Common,Latin"
 sortRefs="true"
 submissionType="IETF"
 symRefs="true"
 tocDepth="3"
 tocInclude="true"
 version="3"
 xml:lang="en">

<front>
  <title abbrev="erasure-encoding">
    The Mojette Transformation for the Erasure Encoding of Files in NFSv4.2
  </title>
  <seriesInfo name="Internet-Draft" value="draft-haynes-nfsv4-mojette-layout-VERSIONVAR"/>
  <author fullname="Thomas Haynes" initials="T." surname="Haynes">
    <organization abbrev="Hammerspace">Hammerspace</organization>
    <address>
      <email>loghyr@hammerspace.com</email>
    </address>
  </author>
  <author fullname="Pierre Evenou" initials="P." surname="Evenou">
    <organization abbrev="Hammerspace">Hammerspace</organization>
    <address>
      <email>pierre.evenou@hammerspace.com</email>
    </address>
  </author>
  <date year="YEARVAR" month="MONTHVAR" day="DAYVAR"/>
  <area>Transport</area>
  <workgroup>Network File System Version 4</workgroup>
  <keyword>NFSv4</keyword>
  <abstract>
    <t>
    </t>
  </abstract>

  <note removeInRFC="true">
    <t>
      Discussion of this draft takes place
      on the NFSv4 working group mailing list (nfsv4@ietf.org),
      which is archived at
      <eref target="https://mailarchive.ietf.org/arch/browse/nfsv4/"/>.
      Working Group information can be found at
      <eref target="https://datatracker.ietf.org/wg/nfsv4/about/"/>.
    </t>
  </note>
</front>

<middle>

  <section anchor="sec_intro" numbered="true" removeInRFC="false" toc="default">
    <name>Introduction</name>
    <t>
    </t>

    <t>
      Using the process detailed in <xref target="RFC8178" format="default"
      sectionFormat="of"/>, the revisions in this document become an
      extension of NFSv4.2 <xref target="RFC7862" format="default"
      sectionFormat="of"/>. They are built on top of the external data
      representation (XDR) <xref target="RFC4506" format="default"
      sectionFormat="of"/> generated from <xref target="RFC7863"
      format="default" sectionFormat="of"/>.
    </t>

    <section anchor="sec_defs" numbered="true" removeInRFC="false" toc="default">
      <name>Definitions</name>
      <dl newline="false" spacing="normal">
        <dt>Client Side Mirroring:</dt>
        <dd>
          A file based replication method where copies are maintained
          in parallel.
        </dd>
      </dl>
    </section>

    <section numbered="true" removeInRFC="false" toc="default">
      <name>Requirements Language</name>
      <t>
        The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
        "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
        NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
        "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
        "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this
        document are to be interpreted as described in BCP&nbsp;14 <xref
        target="RFC2119" format="default" sectionFormat="of"/> <xref
        target="RFC8174" format="default" sectionFormat="of"/> when,
        and only when, they appear in all capitals, as shown here.
      </t>
    </section>
  </section>

  <section anchor="sec_nsmt" numbered="true" removeInRFC="false" toc="default">
    <name>Non-Systematic Mojette Transform</name>
  </section>

  <section anchor="sec_smt" numbered="true" removeInRFC="false" toc="default">
    <name>Systematic Mojette Transform</name>

    <t>
      The Mojette Transform is an erasure coding technique that provides
      fault tolerance for data storage systems by enabling the recovery
      of lost data blocks. This section describes the integration of the
      systematic Mojette Transform into the NFS protocol, focusing on
      encoding and decoding file system blocks, typically sized at 4KB
      or 8KB.
    </t>

    <section anchor="sec_sys_dbr" numbered="true" removeInRFC="false" toc="default">
      <name>Data Block Representation</name>

      <t>
        In the context of NFS, a data block corresponds to a file system block,
        which is a contiguous segment of data, typically 4KB or 8KB in size. The
        systematic Mojette Transform encodes these blocks to ensure data integrity
        and availability in distributed storage environments.
      </t>
    </section>

    <section anchor="sec_sys_esmt" numbered="true" removeInRFC="false" toc="default">
      <name>Encoding with the Systematic Mojette Transform</name>

      <t>
        The systematic Mojette Transform involves the following steps to encode
        a file system block:
      </t>

      <dl newline="false" spacing="normal">
        <dt>Initialization:</dt>
        <dd>
          Each file system block is treated as a 2D grid of data elements
          (pixels). Typically, a block is structured as a matrix of size
          P * Q, where P and Q are the dimensions of the grid.
        </dd>

        <dt>Projections Calculation:</dt>
        <dd>
          Projections are computed along specific directions defined by
          pairs of coprime integers (p_i, q_i). Each projection sums the
          values of the data elements (pixels) along a line defined by
          these directions. The size of a projection is given by:

          For a given projection direction (p_i, q_i), where $\Delta$
          is 1 if the argument is zero and 0 otherwise, the projection
          values are calculated as:

        </dd>

        <dt>Systematic Code Construction:</dt>
        <dd>
          In the systematic version, the original data block (file system
          block) is part of the encoded output. Additional projections are
          calculated to provide redundancy. If K is the number of original
          data blocks and N is the total number of encoded blocks (including
          projections), the systematic code will have the first K blocks as
          the original data and the remaining N - K blocks as projections.
        </dd>
      </dl>

          <figure anchor='size_of_proj'>
            <artwork>
Size of projection = (P - 1) * |q| + (Q - 1) * |p| + 1
            </artwork>
         </figure>

          <figure anchor='projection'>
            <artwork>
Projection(b, p_i, q_i) = \sum_{k=0}^{Q-1} \sum_{l=0}^{P-1} \text{Data}(k, l) * \Delta(b - l * p_i + k * q_i)
            </artwork>
         </figure>

    </section>

    <section anchor="sec_sys_dsmt" numbered="true" removeInRFC="false" toc="default">
      <name>Decoding with the Systematic Mojette Transform</name>

      <t>
        To decode a file system block that has undergone the systematic Mojette
        Transform, the following steps are followed:
      </t>

      <dl newline="false" spacing="normal">
        <dt>Identify Missing Data:</dt>
        <dd>
          Determine which data blocks are missing. Let
          E be the number of missing blocks.
        </dd>

        <dt>Recompute Projections:</dt>
        <dd>
          Compute the projections of the available (partial) data
          blocks. Calculate the differences between the projections of
          the full data and the partial data.
        </dd>

        <dt>Reconstruction Algorithm:</dt>
        <dd>
          Use the inverse Mojette Transform algorithm to reconstruct the
          missing data. This involves solving a system of linear equations
          defined by the projection differences and the projection
          directions (p_i, q_i). The algorithm iteratively refines the
          values of the missing data elements until the original data
          block is reconstructed.
        </dd>
      </dl>
    </section>

    <section numbered="true" removeInRFC="false" toc="default">
      <name>Example</name>

      <t>
        Assume a file system block of 4KB is divided into a $64\times4$
        matrix of 128-bit elements. Using the systematic Mojette Transform,
        we first compute projections along selected directions, such
        as (0, 1), and (1 ,1). The original 4 blocks of 64 128-bit
        elements remains part of the encoded data, and the 2 additional
        projections are stored for redundancy. If a data loss occurs,
        the missing elements can be recovered by using the projections
        and solving the inverse problem.
      </t>

    </section>
    <section numbered="true" removeInRFC="false" toc="default">
      <name>Conclusion</name>

      <t>
        The systematic Mojette Transform provides an efficient and effective
        way to enhance data reliability by encoding file system blocks
        with additional projections. This method ensures that data can be
        reconstructed even in the presence of failures, thereby enhancing
        the fault tolerance of the file system.
      </t>

    </section>
  </section>

  <section anchor="sec_benefits" numbered="true" removeInRFC="false" toc="default">
    <name>Benefits of Systematic vs. Non-Systematic Mojette Transform</name>

    <dl newline="false" spacing="normal">
      <dt>Redundancy Reduction:</dt>
      <dd>
        Systematic Mojette coding reduces redundancy by integrating the
        original data blocks into the encoded data, unlike non-systematic
        codes that generate entirely new data from the original.
      </dd>

      <dt>Efficiency:</dt>
      <dd>
        Fewer projections need to be calculated and stored, reducing both
        computational and storage overhead.
      </dd>

      <dt>Performance:</dt>
      <dd>
        Decoding is faster and simpler, especially when some original data
        blocks are available, enabling quicker data recovery and access.
      </dd>
    </dl>

    <t>
      By leveraging the systematic Mojette Transform, NFS client can achieve
      robust data protection with minimal performance impact.
    </t>
  </section>

  <section anchor="xdr_desc" numbered="true" removeInRFC="false" toc="default">
    <name>Extraction of XDR</name>
    <t>
      This document contains the external data representation (XDR)
      <xref target="RFC4506" format="default" sectionFormat="of"/> description of the uncacheable
      attribute.
      The XDR description is embedded in this
      document in a way that makes it simple for the reader to extract
      into a ready-to-compile form.  The reader can feed this document
      into the following shell script to produce the machine readable
      XDR description of the new flags:
    </t>
    <sourcecode name="" type="" markers="true"><![CDATA[
#!/bin/sh
grep '^ *///' $* | sed 's?^ */// ??' | sed 's?^ *///$??'
    ]]>
    </sourcecode>
    <t>
      That is, if the above script is stored in a file called "extract.sh", and
      this document is in a file called "spec.txt", then the reader can do:
    </t>
    <sourcecode name="" type="" markers="true"><![CDATA[
sh extract.sh < spec.txt > erasure_coding_prot.x
    ]]>
    </sourcecode>
    <t>
      The effect of the script is to remove leading white space from each
      line, plus a sentinel sequence of "///".  XDR descriptions with the
      sentinel sequence are embedded throughout the document.
    </t>
    <t>
      Note that the XDR code contained in this document depends on types
      from the NFSv4.2 nfs4_prot.x file (generated from
      <xref target="RFC7863" format="default" sectionFormat="of"/>)
      and the Flex Files Layout Type flexfiles.x file (generated from
      <xref target="RFC8435" format="default" sectionFormat="of"/>).
      This includes both nfs types that end with a 4, such as offset4,
      length4, etc., as well as more generic types such as uint32_t and
      uint64_t.
    </t>
    <t>
      While the XDR can be appended to that from
      <xref target="RFC7863" format="default" sectionFormat="of"/>,
      the various code snippets belong in their respective areas of
      that XDR.
    </t>
  </section>

  <section anchor="sec_security" numbered="true" removeInRFC="false" toc="default">
    <name>Security Considerations</name>
    <t>
    </t>
  </section>

  <section anchor="sec_iana" numbered="true" removeInRFC="false" toc="default">
    <name>IANA Considerations</name>
    <t>
      There are IANA considerations.
    </t>
  </section>

</middle>

<back>

<references>
  <name>References</name>

  <references>
  <name>Normative References</name>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4506.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7862.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7863.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8178.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8435.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8881.xml"/>
  </references>
</references>

<section numbered="true" removeInRFC="false" toc="default">
  <name>Acknowledgments</name>
  <t>
    The following from Hammerspace were instrumental in driving
    Flex Files v2: David Flynn, Trond Myklebust, Tom Haynes, Didier Feron,
    Jean-Pierre Monchanin, Pierre Evenou, and Brian Pawlowski.
  </t>
  <t>
    Pierre Evenou provided the sections for the Mojette Transformation.
  </t>
</section>

</back>

</rfc>
